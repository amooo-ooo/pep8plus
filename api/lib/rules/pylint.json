{"E1700": {"description": "Yield inside async function Used when an yield or yield from statement is found inside an async function. This message can't be emitted when using Python < 3.5.", "name": "yield-inside-async-function", "value": true, "category": "Async"}, "E1701": {"description": "Async context manager '%s' doesn't implement __aenter__ and __aexit__. Used when an async context manager is used with an object that does not implement the async context management protocol. This message can't be emitted when using Python < 3.5.", "name": "not-async-context-manager", "value": true, "category": "Async"}, "W3601": {"description": "Suspicious %s-part chained comparison using semantically incompatible operators (%s) Used when there is a chained comparison where one expression is part of two comparisons that belong to different semantic groups (\"<\" does not mean the same thing as \"is\", chaining them in \"0 < x is None\" is probably a mistake).", "name": "bad-chained-comparison", "value": true, "category": "Bad-Chained-Comparison"}, "C0103": {"description": "%s name \"%s\" doesn't conform to %s Used when the name doesn't conform to naming rules associated to its type (constant, variable, class...).", "name": "invalid-name", "value": true, "category": "Basic"}, "C0104": {"description": "Disallowed name \"%s\" Used when the name matches bad-names or bad-names-rgxs- (unauthorized names).", "name": "disallowed-name", "value": true, "category": "Basic"}, "C0105": {"description": "Type variable name does not reflect variance%s Emitted when a TypeVar name doesn't reflect its type variance. According to PEP8, it is recommended to add suffixes '_co' and '_contra' to the variables used to declare covariant or contravariant behaviour respectively. Invariant (default) variables do not require a suffix. The message is also emitted when invariant variables do have a suffix.", "name": "typevar-name-incorrect-variance", "value": true, "category": "Basic"}, "C0112": {"description": "Empty %s docstring Used when a module, function, class or method has an empty docstring (it would be too easy ;).", "name": "empty-docstring", "value": true, "category": "Basic"}, "C0114": {"description": "Missing module docstring Used when a module has no docstring. Empty modules do not require a docstring.", "name": "missing-module-docstring", "value": true, "category": "Basic"}, "C0115": {"description": "Missing class docstring Used when a class has no docstring. Even an empty class must have a docstring.", "name": "missing-class-docstring", "value": true, "category": "Basic"}, "C0116": {"description": "Missing function or method docstring Used when a function or method has no docstring. Some special methods like __init__ do not require a docstring.", "name": "missing-function-docstring", "value": true, "category": "Basic"}, "C0121": {"description": "Comparison %s should be %s Used when an expression is compared to singleton values like True, False or None.", "name": "singleton-comparison", "value": true, "category": "Basic"}, "C0123": {"description": "Use isinstance() rather than type() for a typecheck. The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.", "name": "unidiomatic-typecheck", "value": true, "category": "Basic"}, "C0131": {"description": "TypeVar cannot be both covariant and contravariant Emitted when both the \"covariant\" and \"contravariant\" keyword arguments are set to \"True\" in a TypeVar.", "name": "typevar-double-variance", "value": true, "category": "Basic"}, "C0132": {"description": "TypeVar name \"%s\" does not match assigned variable name \"%s\" Emitted when a TypeVar is assigned to a variable that does not match its name argument.", "name": "typevar-name-mismatch", "value": true, "category": "Basic"}, "E0100": {"description": "__init__ method is a generator Used when the special class method __init__ is turned into a generator by a yield in its body.", "name": "init-is-generator", "value": true, "category": "Basic"}, "E0101": {"description": "Explicit return in __init__ Used when the special class method __init__ has an explicit return value.", "name": "return-in-init", "value": true, "category": "Basic"}, "E0102": {"description": "%s already defined line %s Used when a function / class / method is redefined.", "name": "function-redefined", "value": true, "category": "Basic"}, "E0103": {"description": "%r not properly in loop Used when break or continue keywords are used outside a loop.", "name": "not-in-loop", "value": true, "category": "Basic"}, "E0104": {"description": "Return outside function Used when a \"return\" statement is found outside a function or method.", "name": "return-outside-function", "value": true, "category": "Basic"}, "E0105": {"description": "Yield outside function Used when a \"yield\" statement is found outside a function or method.", "name": "yield-outside-function", "value": true, "category": "Basic"}, "E0106": {"description": "Return with argument inside generator Used when a \"return\" statement with an argument is found in a generator function or method (e.g. with some \"yield\" statements). This message can't be emitted when using Python >= 3.3.", "name": "return-arg-in-generator", "value": true, "category": "Basic"}, "E0107": {"description": "Use of the non-existent %s operator Used when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which doesn't exist in Python.", "name": "nonexistent-operator", "value": true, "category": "Basic"}, "E0108": {"description": "Duplicate argument name %s in function definition Duplicate argument names in function definitions are syntax errors.", "name": "duplicate-argument-name", "value": true, "category": "Basic"}, "E0110": {"description": "Abstract class %r with abstract methods instantiated Used when an abstract class with abc.ABCMeta as metaclass has abstract methods and is instantiated.", "name": "abstract-class-instantiated", "value": true, "category": "Basic"}, "E0111": {"description": "The first reversed() argument is not a sequence Used when the first argument to reversed() builtin isn't a sequence (does not implement __reversed__, nor __getitem__ and __len__.", "name": "bad-reversed-sequence", "value": true, "category": "Basic"}, "E0112": {"description": "More than one starred expression in assignment Emitted when there are more than one starred expressions (*x) in an assignment. This is a SyntaxError.", "name": "too-many-star-expressions", "value": true, "category": "Basic"}, "E0113": {"description": "Starred assignment target must be in a list or tuple Emitted when a star expression is used as a starred assignment target.", "name": "invalid-star-assignment-target", "value": true, "category": "Basic"}, "E0114": {"description": "Can use starred expression only in assignment target Emitted when a star expression is not used in an assignment target.", "name": "star-needs-assignment-target", "value": true, "category": "Basic"}, "E0115": {"description": "Name %r is nonlocal and global Emitted when a name is both nonlocal and global.", "name": "nonlocal-and-global", "value": true, "category": "Basic"}, "E0116": {"description": "'continue' not supported inside 'finally' clause Emitted when the continue keyword is found inside a finally clause, which is a SyntaxError.", "name": "continue-in-finally", "value": true, "category": "Basic"}, "E0117": {"description": "Nonlocal name %s found without binding Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes.", "name": "nonlocal-without-binding", "value": true, "category": "Basic"}, "E0118": {"description": "Name %r is used prior to global declaration Emitted when a name is used prior a global declaration, which results in an error since Python 3.6. This message can't be emitted when using Python < 3.6.", "name": "used-prior-global-declaration", "value": true, "category": "Basic"}, "E0119": {"description": "Format function is not called on str Emitted when format function is not called on str object. e.g doing print(\"value: {}\").format(123) instead of print(\"value: {}\".format(123)). This might not be what the user intended to do.", "name": "misplaced-format-function", "value": true, "category": "Basic"}, "R0123": {"description": "In '%s', use '%s' when comparing constant literals not '%s' ('%s') Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.", "name": "literal-comparison", "value": true, "category": "Basic"}, "R0124": {"description": "Redundant comparison - %s Used when something is compared against itself.", "name": "comparison-with-itself", "value": true, "category": "Basic"}, "R0133": {"description": "Comparison between constants: '%s %s %s' has a constant value When two literals are compared with each other the result is a constant. Using the constant directly is both easier to read and more performant. Initializing 'True' and 'False' this way is not required since Python 2.3.", "name": "comparison-of-constants", "value": true, "category": "Basic"}, "RP0101": {"description": "Statistics by type.", "name": "", "value": true, "category": "Basic"}, "W0101": {"description": "Unreachable code Used when there is some code behind a \"return\" or \"raise\" statement, which will never be accessed.", "name": "unreachable", "value": true, "category": "Basic"}, "W0102": {"description": "Dangerous default value %s as argument Used when a mutable value as list or dictionary is detected in a default value for an argument.", "name": "dangerous-default-value", "value": true, "category": "Basic"}, "W0104": {"description": "Statement seems to have no effect Used when a statement doesn't have (or at least seems to) any effect.", "name": "pointless-statement", "value": true, "category": "Basic"}, "W0105": {"description": "String statement has no effect Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.", "name": "pointless-string-statement", "value": true, "category": "Basic"}, "W0106": {"description": "Expression \"%s\" is assigned to nothing Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.", "name": "expression-not-assigned", "value": true, "category": "Basic"}, "W0107": {"description": "Unnecessary pass statement Used when a \"pass\" statement can be removed without affecting the behaviour of the code.", "name": "unnecessary-pass", "value": true, "category": "Basic"}, "W0108": {"description": "Lambda may not be necessary Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.", "name": "unnecessary-lambda", "value": true, "category": "Basic"}, "W0109": {"description": "Duplicate key %r in dictionary Used when a dictionary expression binds the same key multiple times.", "name": "duplicate-key", "value": true, "category": "Basic"}, "W0120": {"description": "Else clause on loop without a break statement, remove the else and de-indent all the code inside it Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.", "name": "useless-else-on-loop", "value": true, "category": "Basic"}, "W0122": {"description": "Use of exec Raised when the 'exec' statement is used. It's dangerous to use this function for a user input, and it's also slower than actual code in general. This doesn't mean you should never use it, but you should consider alternatives first and restrict the functions available.", "name": "exec-used", "value": true, "category": "Basic"}, "W0123": {"description": "Use of eval Used when you use the \"eval\" function, to discourage its usage. Consider using ast.literal_eval for safely evaluating strings containing Python expressions from untrusted sources.", "name": "eval-used", "value": true, "category": "Basic"}, "W0124": {"description": "Following \"as\" with another context manager looks like a tuple. Emitted when a with statement component returns multiple values and uses name binding with as only for a part of those values, as in with ctx() as a, b. This can be misleading, since it's not clear if the context manager returns a tuple or if the node without a name binding is another context manager.", "name": "confusing-with-statement", "value": true, "category": "Basic"}, "W0125": {"description": "Using a conditional statement with a constant value Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.", "name": "using-constant-test", "value": true, "category": "Basic"}, "W0126": {"description": "Using a conditional statement with potentially wrong function or method call due to missing parentheses Emitted when a conditional statement (If or ternary if) seems to wrongly call a function due to missing parentheses.", "name": "missing-parentheses-for-call-in-test", "value": true, "category": "Basic"}, "W0127": {"description": "Assigning the same variable %r to itself Emitted when we detect that a variable is assigned to itself.", "name": "self-assigning-variable", "value": true, "category": "Basic"}, "W0128": {"description": "Redeclared variable %r in assignment Emitted when we detect that a variable was redeclared in the same assignment.", "name": "redeclared-assigned-name", "value": true, "category": "Basic"}, "W0129": {"description": "Assert statement has a string literal as its first argument. The assert will %s fail. Used when an assert statement has a string literal as its first argument, which will cause the assert to always pass.", "name": "assert-on-string-literal", "value": true, "category": "Basic"}, "W0130": {"description": "Duplicate value %r in set This message is emitted when a set contains the same value two or more times.", "name": "duplicate-value", "value": true, "category": "Basic"}, "W0131": {"description": "Named expression used without context Emitted if named expression is used to do a regular assignment outside a context like if, for, while, or a comprehension.", "name": "named-expr-without-context", "value": true, "category": "Basic"}, "W0133": {"description": "Exception statement has no effect Used when an exception is created without being assigned, raised or returned for subsequent use elsewhere.", "name": "pointless-exception-statement", "value": true, "category": "Basic"}, "W0134": {"description": "'return' shadowed by the 'finally' clause. Emitted when a 'return' statement is found in a 'finally' block. This will overwrite the return value of a function and should be avoided.", "name": "return-in-finally", "value": true, "category": "Basic"}, "W0143": {"description": "Comparing against a callable, did you omit the parenthesis? This message is emitted when pylint detects that a comparison with a callable was made, which might suggest that some parenthesis were omitted, resulting in potential unwanted behaviour.", "name": "comparison-with-callable", "value": true, "category": "Basic"}, "W0150": {"description": "%s statement in finally block may swallow exception Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.", "name": "lost-exception", "value": true, "category": "Basic"}, "W0177": {"description": "Comparison %s should be %s Used when an expression is compared to NaN values like numpy.NaN and float('nan').", "name": "nan-comparison", "value": true, "category": "Basic"}, "W0199": {"description": "Assert called on a populated tuple. Did you mean 'assert x,y'? A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.", "name": "assert-on-tuple", "value": true, "category": "Basic"}, "C0202": {"description": "Class method %s should have %s as first argument Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods.", "name": "bad-classmethod-argument", "value": true, "category": "Classes"}, "C0203": {"description": "Metaclass method %s should have %s as first argument Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods.", "name": "bad-mcs-method-argument", "value": true, "category": "Classes"}, "C0204": {"description": "Metaclass class method %s should have %s as first argument Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to \"mcs\"), recommended to easily differentiate them from regular instance methods.", "name": "bad-mcs-classmethod-argument", "value": true, "category": "Classes"}, "C0205": {"description": "Class __slots__ should be a non-string iterable Used when a class __slots__ is a simple string, rather than an iterable.", "name": "single-string-used-for-slots", "value": true, "category": "Classes"}, "E0202": {"description": "An attribute defined in %s line %s hides this method Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.", "name": "method-hidden", "value": true, "category": "Classes"}, "E0203": {"description": "Access to member %r before its definition line %s Used when an instance member is accessed before it's actually assigned.", "name": "access-member-before-definition", "value": true, "category": "Classes"}, "E0211": {"description": "Method %r has no argument Used when a method which should have the bound instance as first argument has no argument defined.", "name": "no-method-argument", "value": true, "category": "Classes"}, "E0213": {"description": "Method %r should have \"self\" as first argument Used when a method has an attribute different the \"self\" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!.", "name": "no-self-argument", "value": true, "category": "Classes"}, "E0236": {"description": "Invalid object %r in __slots__, must contain only non empty strings Used when an invalid (non-string) object occurs in __slots__.", "name": "invalid-slots-object", "value": true, "category": "Classes"}, "E0237": {"description": "Assigning to attribute %r not defined in class slots Used when assigning to an attribute not defined in the class slots.", "name": "assigning-non-slot", "value": true, "category": "Classes"}, "E0238": {"description": "Invalid __slots__ object Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.", "name": "invalid-slots", "value": true, "category": "Classes"}, "E0239": {"description": "Inheriting %r, which is not a class. Used when a class inherits from something which is not a class.", "name": "inherit-non-class", "value": true, "category": "Classes"}, "E0240": {"description": "Inconsistent method resolution order for class %r Used when a class has an inconsistent method resolution order.", "name": "inconsistent-mro", "value": true, "category": "Classes"}, "E0241": {"description": "Duplicate bases for class %r Duplicate use of base classes in derived classes raise TypeErrors.", "name": "duplicate-bases", "value": true, "category": "Classes"}, "E0242": {"description": "Value %r in slots conflicts with class variable Used when a value in __slots__ conflicts with a class variable, property or method.", "name": "class-variable-slots-conflict", "value": true, "category": "Classes"}, "E0243": {"description": "Invalid assignment to '__class__'. Should be a class definition but got a '%s' Used when an invalid object is assigned to a __class__ property. Only a class is permitted.", "name": "invalid-class-object", "value": true, "category": "Classes"}, "E0244": {"description": "Extending inherited Enum class \"%s\" Used when a class tries to extend an inherited Enum class. Doing so will raise a TypeError at runtime.", "name": "invalid-enum-extension", "value": true, "category": "Classes"}, "E0301": {"description": "__iter__ returns non-iterator Used when an __iter__ method returns something which is not an iterable (i.e. has no __next__ method).", "name": "non-iterator-returned", "value": true, "category": "Classes"}, "E0302": {"description": "The special method %r expects %s param(s), %d %s given Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.", "name": "unexpected-special-method-signature", "value": true, "category": "Classes"}, "E0303": {"description": "__len__ does not return non-negative integer Used when a __len__ method returns something which is not a non-negative integer.", "name": "invalid-length-returned", "value": true, "category": "Classes"}, "E0304": {"description": "__bool__ does not return bool Used when a __bool__ method returns something which is not a bool.", "name": "invalid-bool-returned", "value": true, "category": "Classes"}, "E0305": {"description": "__index__ does not return int Used when an __index__ method returns something which is not an integer.", "name": "invalid-index-returned", "value": true, "category": "Classes"}, "E0306": {"description": "__repr__ does not return str Used when a __repr__ method returns something which is not a string.", "name": "invalid-repr-returned", "value": true, "category": "Classes"}, "E0307": {"description": "__str__ does not return str Used when a __str__ method returns something which is not a string.", "name": "invalid-str-returned", "value": true, "category": "Classes"}, "E0308": {"description": "__bytes__ does not return bytes Used when a __bytes__ method returns something which is not bytes.", "name": "invalid-bytes-returned", "value": true, "category": "Classes"}, "E0309": {"description": "__hash__ does not return int Used when a __hash__ method returns something which is not an integer.", "name": "invalid-hash-returned", "value": true, "category": "Classes"}, "E0310": {"description": "__length_hint__ does not return non-negative integer Used when a __length_hint__ method returns something which is not a non- negative integer.", "name": "invalid-length-hint-returned", "value": true, "category": "Classes"}, "E0311": {"description": "__format__ does not return str Used when a __format__ method returns something which is not a string.", "name": "invalid-format-returned", "value": true, "category": "Classes"}, "E0312": {"description": "__getnewargs__ does not return a tuple Used when a __getnewargs__ method returns something which is not a tuple.", "name": "invalid-getnewargs-returned", "value": true, "category": "Classes"}, "E0313": {"description": "__getnewargs_ex__ does not return a tuple containing (tuple, dict) Used when a __getnewargs_ex__ method returns something which is not of the form tuple(tuple, dict).", "name": "invalid-getnewargs-ex-returned", "value": true, "category": "Classes"}, "F0202": {"description": "Unable to check methods signature (%s / %s) Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.", "name": "method-check-failed", "value": true, "category": "Classes"}, "R0202": {"description": "Consider using a decorator instead of calling classmethod Used when a class method is defined without using the decorator syntax.", "name": "no-classmethod-decorator", "value": true, "category": "Classes"}, "R0203": {"description": "Consider using a decorator instead of calling staticmethod Used when a static method is defined without using the decorator syntax.", "name": "no-staticmethod-decorator", "value": true, "category": "Classes"}, "R0205": {"description": "Class %r inherits from object, can be safely removed from bases in python3 Used when a class inherit from object, which under python3 is implicit, hence can be safely removed from bases.", "name": "useless-object-inheritance", "value": true, "category": "Classes"}, "R0206": {"description": "Cannot have defined parameters for properties Used when we detect that a property also has parameters, which are useless, given that properties cannot be called with additional arguments.", "name": "property-with-parameters", "value": true, "category": "Classes"}, "W0201": {"description": "Attribute %r defined outside __init__ Used when an instance attribute is defined outside the __init__ method.", "name": "attribute-defined-outside-init", "value": true, "category": "Classes"}, "W0211": {"description": "Static method with %r as first argument Used when a static method has \"self\" or a value specified in valid- classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.", "name": "bad-staticmethod-argument", "value": true, "category": "Classes"}, "W0212": {"description": "Access to a protected member %s of a client class Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.", "name": "protected-access", "value": true, "category": "Classes"}, "W0213": {"description": "Flag member %(overlap)s shares bit positions with %(sources)s Used when multiple integer values declared within an enum.IntFlag class share a common bit position.", "name": "implicit-flag-alias", "value": true, "category": "Classes"}, "W0221": {"description": "%s %s %r method Used when a method has a different number of arguments than in the implemented interface or in an overridden method. Extra arguments with default values are ignored.", "name": "arguments-differ", "value": true, "category": "Classes"}, "W0222": {"description": "Signature differs from %s %r method Used when a method signature is different than in the implemented interface or in an overridden method.", "name": "signature-differs", "value": true, "category": "Classes"}, "W0223": {"description": "Method %r is abstract in class %r but is not overridden in child class %r Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.", "name": "abstract-method", "value": true, "category": "Classes"}, "W0231": {"description": "__init__ method from base class %r is not called Used when an ancestor class method has an __init__ method which is not called by a derived class.", "name": "super-init-not-called", "value": true, "category": "Classes"}, "W0233": {"description": "__init__ method from a non direct base class %r is called Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.", "name": "non-parent-init-called", "value": true, "category": "Classes"}, "W0236": {"description": "Method %r was expected to be %r, found it instead as %r Used when we detect that a method was overridden in a way that does not match its base class which could result in potential bugs at runtime.", "name": "invalid-overridden-method", "value": true, "category": "Classes"}, "W0237": {"description": "%s %s %r method Used when a method parameter has a different name than in the implemented interface or in an overridden method.", "name": "arguments-renamed", "value": true, "category": "Classes"}, "W0238": {"description": "Unused private member `%s.%s` Emitted when a private member of a class is defined but not used.", "name": "unused-private-member", "value": true, "category": "Classes"}, "W0239": {"description": "Method %r overrides a method decorated with typing.final which is defined in class %r Used when a method decorated with typing.final has been overridden.", "name": "overridden-final-method", "value": true, "category": "Classes"}, "W0240": {"description": "Class %r is a subclass of a class decorated with typing.final: %r Used when a class decorated with typing.final has been subclassed.", "name": "subclassed-final-class", "value": true, "category": "Classes"}, "W0244": {"description": "Redefined slots %r in subclass Used when a slot is re-defined in a subclass.", "name": "redefined-slots-in-subclass", "value": true, "category": "Classes"}, "W0245": {"description": "Super call without brackets Used when a call to super does not have brackets and thus is not an actual call and does not work as expected.", "name": "super-without-brackets", "value": true, "category": "Classes"}, "W0246": {"description": "Useless parent or super() delegation in method %r Used whenever we can detect that an overridden method is useless, relying on parent or super() delegation to do the same thing as another method from the MRO.", "name": "useless-parent-delegation", "value": true, "category": "Classes"}, "E3701": {"description": "Invalid usage of field(), %s The dataclasses.field() specifier should only be used as the value of an assignment within a dataclass, or within the make_dataclass() function.", "name": "invalid-field-call", "value": true, "category": "Dataclass"}, "R0901": {"description": "Too many ancestors (%s/%s) Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.", "name": "too-many-ancestors", "value": true, "category": "Design"}, "R0902": {"description": "Too many instance attributes (%s/%s) Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.", "name": "too-many-instance-attributes", "value": true, "category": "Design"}, "R0903": {"description": "Too few public methods (%s/%s) Used when class has too few public methods, so be sure it's really worth it.", "name": "too-few-public-methods", "value": true, "category": "Design"}, "R0904": {"description": "Too many public methods (%s/%s) Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.", "name": "too-many-public-methods", "value": true, "category": "Design"}, "R0911": {"description": "Too many return statements (%s/%s) Used when a function or method has too many return statement, making it hard to follow.", "name": "too-many-return-statements", "value": true, "category": "Design"}, "R0912": {"description": "Too many branches (%s/%s) Used when a function or method has too many branches, making it hard to follow.", "name": "too-many-branches", "value": true, "category": "Design"}, "R0913": {"description": "Too many arguments (%s/%s) Used when a function or method takes too many arguments.", "name": "too-many-arguments", "value": true, "category": "Design"}, "R0914": {"description": "Too many local variables (%s/%s) Used when a function or method has too many local variables.", "name": "too-many-locals", "value": true, "category": "Design"}, "R0915": {"description": "Too many statements (%s/%s) Used when a function or method has too many statements. You should then split it in smaller functions / methods.", "name": "too-many-statements", "value": true, "category": "Design"}, "R0916": {"description": "Too many boolean expressions in if statement (%s/%s) Used when an if statement contains too many boolean expressions.", "name": "too-many-boolean-expressions", "value": true, "category": "Design"}, "E0701": {"description": "Bad except clauses order (%s) Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler.", "name": "bad-except-order", "value": true, "category": "Exceptions"}, "E0702": {"description": "Raising %s while only classes or instances are allowed Used when something which is neither a class nor an instance is raised (i.e. a TypeError will be raised).", "name": "raising-bad-type", "value": true, "category": "Exceptions"}, "E0704": {"description": "The raise statement is not inside an except clause Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.", "name": "misplaced-bare-raise", "value": true, "category": "Exceptions"}, "E0705": {"description": "Exception cause set to something which is not an exception, nor None Used when using the syntax \"raise ... from ...\", where the exception cause is not an exception, nor None.", "name": "bad-exception-cause", "value": true, "category": "Exceptions"}, "E0710": {"description": "Raising a new style class which doesn't inherit from BaseException Used when a new style class which doesn't inherit from BaseException is raised.", "name": "raising-non-exception", "value": true, "category": "Exceptions"}, "E0711": {"description": "NotImplemented raised - should raise NotImplementedError Used when NotImplemented is raised instead of NotImplementedError.", "name": "notimplemented-raised", "value": true, "category": "Exceptions"}, "E0712": {"description": "Catching an exception which doesn't inherit from Exception: %s Used when a class which doesn't inherit from Exception is used as an exception in an except clause.", "name": "catching-non-exception", "value": true, "category": "Exceptions"}, "W0702": {"description": "No exception type(s) specified A bare except: clause will catch SystemExit and KeyboardInterrupt exceptions, making it harder to interrupt a program with Control-C, and can disguise other problems. If you want to catch all exceptions that signal program errors, use except Exception: (bare except is equivalent to except BaseException:).", "name": "bare-except", "value": true, "category": "Exceptions"}, "W0705": {"description": "Catching previously caught exception type %s Used when an except catches a type that was already caught by a previous handler.", "name": "duplicate-except", "value": true, "category": "Exceptions"}, "W0706": {"description": "The except handler raises immediately Used when an except handler uses raise as its first or only operator. This is useless because it raises back the exception immediately. Remove the raise operator or the entire try-except-raise block!.", "name": "try-except-raise", "value": true, "category": "Exceptions"}, "W0707": {"description": "Consider explicitly re-raising using %s'%s from %s' Python's exception chaining shows the traceback of the current exception, but also of the original exception. When you raise a new exception after another exception was caught it's likely that the second exception is a friendly re- wrapping of the first exception. In such cases raise from provides a better link between the two tracebacks in the final error.", "name": "raise-missing-from", "value": true, "category": "Exceptions"}, "W0711": {"description": "Exception to catch is the result of a binary \"%s\" operation Used when the exception to catch is of the form \"except A or B:\". If intending to catch multiple, rewrite as \"except (A, B):\".", "name": "binary-op-exception", "value": true, "category": "Exceptions"}, "W0715": {"description": "Exception arguments suggest string formatting might be intended Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting.", "name": "raising-format-tuple", "value": true, "category": "Exceptions"}, "W0716": {"description": "Invalid exception operation. %s Used when an operation is done against an exception, but the operation is not valid for the exception in question. Usually emitted when having binary operations between exceptions in except handlers.", "name": "wrong-exception-operation", "value": true, "category": "Exceptions"}, "W0718": {"description": "Catching too general exception %s If you use a naked except Exception: clause, you might end up catching exceptions other than the ones you expect to catch. This can hide bugs or make it harder to debug programs when unrelated errors are hidden.", "name": "broad-exception-caught", "value": true, "category": "Exceptions"}, "W0719": {"description": "Raising too general exception: %s Raising exceptions that are too generic force you to catch exceptions generically too. It will force you to use a naked except Exception: clause. You might then end up catching exceptions other than the ones you expect to catch. This can hide bugs or make it harder to debug programs when unrelated errors are hidden.", "name": "broad-exception-raised", "value": true, "category": "Exceptions"}, "C0301": {"description": "Line too long (%s/%s) Used when a line is longer than a given number of characters.", "name": "line-too-long", "value": true, "category": "Format"}, "C0302": {"description": "Too many lines in module (%s/%s) Used when a module has too many lines, reducing its readability.", "name": "too-many-lines", "value": true, "category": "Format"}, "C0303": {"description": "Trailing whitespace Used when there is whitespace between the end of a line and the newline.", "name": "trailing-whitespace", "value": true, "category": "Format"}, "C0304": {"description": "Final newline missing Used when the last line in a file is missing a newline.", "name": "missing-final-newline", "value": true, "category": "Format"}, "C0305": {"description": "Trailing newlines Used when there are trailing blank lines in a file.", "name": "trailing-newlines", "value": true, "category": "Format"}, "C0321": {"description": "More than one statement on a single line Used when more than on statement are found on the same line.", "name": "multiple-statements", "value": true, "category": "Format"}, "C0325": {"description": "Unnecessary parens after %r keyword Used when a single item in parentheses follows an if, for, or other keyword.", "name": "superfluous-parens", "value": true, "category": "Format"}, "C0327": {"description": "Mixed line endings LF and CRLF Used when there are mixed (LF and CRLF) newline signs in a file.", "name": "mixed-line-endings", "value": true, "category": "Format"}, "C0328": {"description": "Unexpected line ending format. There is '%s' while it should be '%s'. Used when there is different newline than expected.", "name": "unexpected-line-ending-format", "value": true, "category": "Format"}, "W0301": {"description": "Unnecessary semicolon Used when a statement is ended by a semi-colon (\";\"), which isn't necessary (that's python, not C ;).", "name": "unnecessary-semicolon", "value": true, "category": "Format"}, "W0311": {"description": "Bad indentation. Found %s %s, expected %s Used when an unexpected number of indentation's tabulations or spaces has been found.", "name": "bad-indentation", "value": true, "category": "Format"}, "C0410": {"description": "Multiple imports on one line (%s) Used when import statement importing multiple modules is detected.", "name": "multiple-imports", "value": true, "category": "Imports"}, "C0411": {"description": "%s should be placed before %s Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports).", "name": "wrong-import-order", "value": true, "category": "Imports"}, "C0412": {"description": "Imports from package %s are not grouped Used when imports are not grouped by packages.", "name": "ungrouped-imports", "value": true, "category": "Imports"}, "C0413": {"description": "Import \"%s\" should be placed at the top of the module Used when code and imports are mixed.", "name": "wrong-import-position", "value": true, "category": "Imports"}, "C0414": {"description": "Import alias does not rename original package Used when an import alias is same as original package, e.g., using import numpy as numpy instead of import numpy as np.", "name": "useless-import-alias", "value": true, "category": "Imports"}, "C0415": {"description": "Import outside toplevel (%s) Used when an import statement is used anywhere other than the module toplevel. Move this import to the top of the file.", "name": "import-outside-toplevel", "value": true, "category": "Imports"}, "E0401": {"description": "Unable to import %s Used when pylint has been unable to import a module.", "name": "import-error", "value": true, "category": "Imports"}, "E0402": {"description": "Attempted relative import beyond top-level package Used when a relative import tries to access too many levels in the current package.", "name": "relative-beyond-top-level", "value": true, "category": "Imports"}, "R0401": {"description": "Cyclic import (%s) Used when a cyclic import between two or more modules is detected.", "name": "cyclic-import", "value": true, "category": "Imports"}, "R0402": {"description": "Use 'from %s import %s' instead Emitted when a submodule of a package is imported and aliased with the same name, e.g., instead of import concurrent.futures as futures use from concurrent import futures.", "name": "consider-using-from-import", "value": true, "category": "Imports"}, "RP0401": {"description": "External dependencies.", "name": "", "value": true, "category": "Imports"}, "RP0402": {"description": "Modules dependencies graph.", "name": "", "value": true, "category": "Imports"}, "W0401": {"description": "Wildcard import %s Used when from module import * is detected.", "name": "wildcard-import", "value": true, "category": "Imports"}, "W0404": {"description": "Reimport %r (imported line %s) Used when a module is imported more than once.", "name": "reimported", "value": true, "category": "Imports"}, "W0406": {"description": "Module import itself Used when a module is importing itself.", "name": "import-self", "value": true, "category": "Imports"}, "W0407": {"description": "Prefer importing %r instead of %r Used when a module imported has a preferred replacement module.", "name": "preferred-module", "value": true, "category": "Imports"}, "W0410": {"description": "__future__ import is not the first non docstring statement Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.", "name": "misplaced-future", "value": true, "category": "Imports"}, "W0416": {"description": "Shadowed %r (imported line %s) Used when a module is aliased with a name that shadows another import.", "name": "shadowed-import", "value": true, "category": "Imports"}, "W4901": {"description": "Deprecated module %r A module marked as deprecated is imported.", "name": "deprecated-module", "value": true, "category": "Imports"}, "C3001": {"description": "Lambda expression assigned to a variable. Define a function using the \"def\" keyword instead. Used when a lambda expression is assigned to variable rather than defining a standard function with the \"def\" keyword.", "name": "unnecessary-lambda-assignment", "value": true, "category": "Lambda-Expressions"}, "C3002": {"description": "Lambda expression called directly. Execute the expression inline instead. Used when a lambda expression is directly called rather than executing its contents inline.", "name": "unnecessary-direct-lambda-call", "value": true, "category": "Lambda-Expressions"}, "E1200": {"description": "Unsupported logging format character %r (%#02x) at index %d Used when an unsupported format character is used in a logging statement format string.", "name": "logging-unsupported-format", "value": true, "category": "Logging"}, "E1201": {"description": "Logging format string ends in middle of conversion specifier Used when a logging statement format string terminates before the end of a conversion specifier.", "name": "logging-format-truncated", "value": true, "category": "Logging"}, "E1205": {"description": "Too many arguments for logging format string Used when a logging format string is given too many arguments.", "name": "logging-too-many-args", "value": true, "category": "Logging"}, "E1206": {"description": "Not enough arguments for logging format string Used when a logging format string is given too few arguments.", "name": "logging-too-few-args", "value": true, "category": "Logging"}, "W1201": {"description": "Use %s formatting in logging functions Used when a logging statement has a call form of \"logging.<logging method>(format_string % (format_args...))\". Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-fstring- interpolation is disabled then you can use fstring formatting. If logging- format-interpolation is disabled then you can use str.format.", "name": "logging-not-lazy", "value": true, "category": "Logging"}, "W1202": {"description": "Use %s formatting in logging functions Used when a logging statement has a call form of \"logging.<logging method>(format_string.format(format_args...))\". Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-fstring- interpolation is disabled then you can use fstring formatting. If logging- not-lazy is disabled then you can use % formatting as normal.", "name": "logging-format-interpolation", "value": true, "category": "Logging"}, "W1203": {"description": "Use %s formatting in logging functions Used when a logging statement has a call form of \"logging.<logging method>(f\"...\")\".Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-format-interpolation is disabled then you can use str.format. If logging-not-lazy is disabled then you can use % formatting as normal.", "name": "logging-fstring-interpolation", "value": true, "category": "Logging"}, "E3102": {"description": "`%s()` got some positional-only arguments passed as keyword arguments: %s Emitted when positional-only arguments have been passed as keyword arguments. Remove the keywords for the affected arguments in the function call. This message can't be emitted when using Python < 3.8.", "name": "positional-only-arguments-expected", "value": true, "category": "Method Args"}, "RP0701": {"description": "Raw metrics.", "name": "", "value": true, "category": "Method Args"}, "W3101": {"description": "Missing timeout argument for method '%s' can cause your program to hang indefinitely Used when a method needs a 'timeout' parameter in order to avoid waiting for a long time. If no timeout is specified explicitly the default value is used. For example for 'requests' the program will never time out (i.e. hang indefinitely).", "name": "missing-timeout", "value": true, "category": "Method Args"}, "I0023": {"description": "Used when a message is enabled or disabled by id.", "name": "use-symbolic-message-instead", "value": true, "category": "Miscellaneous"}, "W0511": {"description": "Used when a warning note as FIXME or XXX is detected.", "name": "fixme", "value": true, "category": "Miscellaneous"}, "E4702": {"description": "Iterated dict '%s' is being modified inside for loop body, iterate through a copy of it instead. Emitted when items are added or removed to a dict being iterated through. Doing so raises a RuntimeError.", "name": "modified-iterating-dict", "value": true, "category": "Modified Iteration"}, "E4703": {"description": "Iterated set '%s' is being modified inside for loop body, iterate through a copy of it instead. Emitted when items are added or removed to a set being iterated through. Doing so raises a RuntimeError.", "name": "modified-iterating-set", "value": true, "category": "Modified Iteration"}, "W4701": {"description": "Iterated list '%s' is being modified inside for loop body, consider iterating through a copy of it instead. Emitted when items are added or removed to a list being iterated through. Doing so can result in unexpected behaviour, that is why it is preferred to use a copy of the list.", "name": "modified-iterating-list", "value": true, "category": "Modified Iteration"}, "W3301": {"description": "Do not use nested call of '%s'; it's possible to do '%s' instead Nested calls min(1, min(2, 3)) can be rewritten as min(1, 2, 3).", "name": "nested-min-max", "value": true, "category": "Nested Min Max"}, "E1003": {"description": "Bad first argument %r given to super() Used when another argument than the current class is given as first argument of the super builtin.", "name": "bad-super-call", "value": true, "category": "Newstyle"}, "C2401": {"description": "%s name \"%s\" contains a non-ASCII character, consider renaming it. Used when the name contains at least one non-ASCII unicode character. See https://peps.python.org/pep-0672/#confusing-features for a background why this could be bad. If your programming guideline defines that you are programming in English, then there should be no need for non ASCII characters in Python Names. If not you can simply disable this check.", "name": "non-ascii-name", "value": true, "category": "Nonascii-Checker"}, "C2403": {"description": "%s name \"%s\" contains a non-ASCII character, use an ASCII-only alias for import. Used when the name contains at least one non-ASCII unicode character. See https://peps.python.org/pep-0672/#confusing-features for a background why this could be bad. If your programming guideline defines that you are programming in English, then there should be no need for non ASCII characters in Python Names. If not you can simply disable this check.", "name": "non-ascii-module-import", "value": true, "category": "Nonascii-Checker"}, "W2402": {"description": "%s name \"%s\" contains a non-ASCII character. Under python 3.5, PEP 3131 allows non-ascii identifiers, but not non-ascii file names.Since Python 3.5, even though Python supports UTF-8 files, some editors or tools don't.", "name": "non-ascii-file-name", "value": true, "category": "Nonascii-Checker"}, "C0117": {"description": "Consider changing \"%s\" to \"%s\" Used when a boolean expression contains an unneeded negation, e.g. when two negation operators cancel each other out.", "name": "unnecessary-negation", "value": true, "category": "Refactoring"}, "C0200": {"description": "Consider using enumerate instead of iterating with range and len Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.", "name": "consider-using-enumerate", "value": true, "category": "Refactoring"}, "C0201": {"description": "Consider iterating the dictionary directly instead of calling .keys() Emitted when the keys of a dictionary are iterated through the .keys() method or when .keys() is used for a membership check. It is enough to iterate through the dictionary itself, for key in dictionary. For membership checks, if key in dictionary is faster.", "name": "consider-iterating-dictionary", "value": true, "category": "Refactoring"}, "C0206": {"description": "Consider iterating with .items() Emitted when iterating over the keys of a dictionary and accessing the value by index lookup. Both the key and value can be accessed by iterating using the .items() method of the dictionary instead.", "name": "consider-using-dict-items", "value": true, "category": "Refactoring"}, "C0207": {"description": "Use %s instead Emitted when accessing only the first or last element of str.split(). The first and last element can be accessed by using str.split(sep, maxsplit=1)[0] or str.rsplit(sep, maxsplit=1)[-1] instead.", "name": "use-maxsplit-arg", "value": true, "category": "Refactoring"}, "C0208": {"description": "Use a sequence type when iterating over values When iterating over values, sequence types (e.g., lists, tuples, ranges) are more efficient than sets.", "name": "use-sequence-for-iteration", "value": true, "category": "Refactoring"}, "C0209": {"description": "Formatting a regular string which could be an f-string Used when we detect a string that is being formatted with format() or % which could potentially be an f-string. The use of f-strings is preferred. Requires Python 3.6 and py-version >= 3.6.", "name": "consider-using-f-string", "value": true, "category": "Refactoring"}, "C1802": {"description": "Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty Empty sequences are considered false in a boolean context. You can either remove the call to 'len' (if not x) or compare the length against a scalar (if len(x) > 1).", "name": "use-implicit-booleaness-not-len", "value": true, "category": "Refactoring"}, "C1803": {"description": "\"%s\" can be simplified to \"%s\", if it is strictly a sequence, as an empty %s is falsey Empty sequences are considered false in a boolean context. Following this check blindly in weakly typed code base can create hard to debug issues. If the value can be something else that is falsey but not a sequence (for example None, an empty string, or 0) the code will not be equivalent.", "name": "use-implicit-booleaness-not-comparison", "value": true, "category": "Refactoring"}, "C1804": {"description": "\"%s\" can be simplified to \"%s\", if it is striclty a string, as an empty string is falsey Empty string are considered false in a boolean context. Following this check blindly in weakly typed code base can create hard to debug issues. If the value can be something else that is falsey but not a string (for example None, an empty sequence, or 0) the code will not be equivalent.", "name": "use-implicit-booleaness-not-comparison-to-string", "value": true, "category": "Refactoring"}, "C1805": {"description": "\"%s\" can be simplified to \"%s\", if it is strictly an int, as 0 is falsey 0 is considered false in a boolean context. Following this check blindly in weakly typed code base can create hard to debug issues. If the value can be something else that is falsey but not an int (for example None, an empty string, or an empty sequence) the code will not be equivalent.", "name": "use-implicit-booleaness-not-comparison-to-zero", "value": true, "category": "Refactoring"}, "R1701": {"description": "Consider merging these isinstance calls to isinstance(%s, (%s)) Used when multiple consecutive isinstance calls can be merged into one.", "name": "consider-merging-isinstance", "value": true, "category": "Refactoring"}, "R1702": {"description": "Too many nested blocks (%s/%s) Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.", "name": "too-many-nested-blocks", "value": true, "category": "Refactoring"}, "R1703": {"description": "The if statement can be replaced with %s Used when an if statement can be replaced with 'bool(test)'.", "name": "simplifiable-if-statement", "value": true, "category": "Refactoring"}, "R1704": {"description": "Redefining argument with the local name %r Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.", "name": "redefined-argument-from-local", "value": true, "category": "Refactoring"}, "R1705": {"description": "Unnecessary \"%s\" after \"return\", %s Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.", "name": "no-else-return", "value": true, "category": "Refactoring"}, "R1706": {"description": "Consider using ternary (%s) Used when one of known pre-python 2.5 ternary syntax is used.", "name": "consider-using-ternary", "value": true, "category": "Refactoring"}, "R1707": {"description": "Disallow trailing comma tuple In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple.", "name": "trailing-comma-tuple", "value": true, "category": "Refactoring"}, "R1708": {"description": "Do not raise StopIteration in generator, use return statement instead According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statement.", "name": "stop-iteration-return", "value": true, "category": "Refactoring"}, "R1709": {"description": "Boolean expression may be simplified to %s Emitted when redundant pre-python 2.5 ternary syntax is used.", "name": "simplify-boolean-expression", "value": true, "category": "Refactoring"}, "R1710": {"description": "Either all return statements in a function should return an expression, or none of them should. According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable).", "name": "inconsistent-return-statements", "value": true, "category": "Refactoring"}, "R1711": {"description": "Useless return at end of function or method Emitted when a single \"return\" or \"return None\" statement is found at the end of function or method definition. This statement can safely be removed because Python will implicitly return None.", "name": "useless-return", "value": true, "category": "Refactoring"}, "R1712": {"description": "Consider using tuple unpacking for swapping variables You do not have to use a temporary variable in order to swap variables. Using \"tuple unpacking\" to directly swap variables makes the intention more clear.", "name": "consider-swap-variables", "value": true, "category": "Refactoring"}, "R1713": {"description": "Consider using str.join(sequence) for concatenating strings from an iterable Using str.join(sequence) is faster, uses less memory and increases readability compared to for-loop iteration.", "name": "consider-using-join", "value": true, "category": "Refactoring"}, "R1714": {"description": "Consider merging these comparisons with 'in' by using '%s %sin (%s)'. Use a set instead if elements are hashable. To check if a variable is equal to one of many values, combine the values into a set or tuple and check if the variable is contained \"in\" it instead of checking for equality against each of the values. This is faster and less verbose.", "name": "consider-using-in", "value": true, "category": "Refactoring"}, "R1715": {"description": "Consider using dict.get for getting values from a dict if a key is present or a default if not Using the builtin dict.get for getting a value from a dictionary if a key is present or a default if not, is simpler and considered more idiomatic, although sometimes a bit slower.", "name": "consider-using-get", "value": true, "category": "Refactoring"}, "R1716": {"description": "Simplify chained comparison between the operands This message is emitted when pylint encounters boolean operation like \"a < b and b < c\", suggesting instead to refactor it to \"a < b < c\".", "name": "chained-comparison", "value": true, "category": "Refactoring"}, "R1717": {"description": "Consider using a dictionary comprehension Emitted when we detect the creation of a dictionary using the dict() callable and a transient list. Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a dict comprehension. Also it is faster since you don't need to create another transient list.", "name": "consider-using-dict-comprehension", "value": true, "category": "Refactoring"}, "R1718": {"description": "Consider using a set comprehension Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a set comprehension. Also it is faster since you don't need to create another transient list.", "name": "consider-using-set-comprehension", "value": true, "category": "Refactoring"}, "R1719": {"description": "The if expression can be replaced with %s Used when an if expression can be replaced with 'bool(test)' or simply 'test' if the boolean cast is implicit.", "name": "simplifiable-if-expression", "value": true, "category": "Refactoring"}, "R1720": {"description": "Unnecessary \"%s\" after \"raise\", %s Used in order to highlight an unnecessary block of code following an if containing a raise statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a raise statement.", "name": "no-else-raise", "value": true, "category": "Refactoring"}, "R1721": {"description": "Unnecessary use of a comprehension, use %s instead. Instead of using an identity comprehension, consider using the list, dict or set constructor. It is faster and simpler.", "name": "unnecessary-comprehension", "value": true, "category": "Refactoring"}, "R1722": {"description": "Consider using 'sys.exit' instead Contrary to 'exit()' or 'quit()', 'sys.exit' does not rely on the site module being available (as the 'sys' module is always available).", "name": "consider-using-sys-exit", "value": true, "category": "Refactoring"}, "R1723": {"description": "Unnecessary \"%s\" after \"break\", %s Used in order to highlight an unnecessary block of code following an if containing a break statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a break statement.", "name": "no-else-break", "value": true, "category": "Refactoring"}, "R1724": {"description": "Unnecessary \"%s\" after \"continue\", %s Used in order to highlight an unnecessary block of code following an if containing a continue statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a continue statement.", "name": "no-else-continue", "value": true, "category": "Refactoring"}, "R1725": {"description": "Consider using Python 3 style super() without arguments Emitted when calling the super() builtin with the current class and instance. On Python 3 these arguments are the default and they can be omitted.", "name": "super-with-arguments", "value": true, "category": "Refactoring"}, "R1726": {"description": "Boolean condition \"%s\" may be simplified to \"%s\" Emitted when a boolean condition is able to be simplified.", "name": "simplifiable-condition", "value": true, "category": "Refactoring"}, "R1727": {"description": "Boolean condition '%s' will always evaluate to '%s' Emitted when a boolean condition can be simplified to a constant value.", "name": "condition-evals-to-constant", "value": true, "category": "Refactoring"}, "R1728": {"description": "Consider using a generator instead '%s(%s)' If your container can be large using a generator will bring better performance.", "name": "consider-using-generator", "value": true, "category": "Refactoring"}, "R1729": {"description": "Use a generator instead '%s(%s)' Comprehension inside of 'any', 'all', 'max', 'min' or 'sum' is unnecessary. A generator would be sufficient and faster.", "name": "use-a-generator", "value": true, "category": "Refactoring"}, "R1730": {"description": "Consider using '%s' instead of unnecessary if block Using the min builtin instead of a conditional improves readability and conciseness.", "name": "consider-using-min-builtin", "value": true, "category": "Refactoring"}, "R1731": {"description": "Consider using '%s' instead of unnecessary if block Using the max builtin instead of a conditional improves readability and conciseness.", "name": "consider-using-max-builtin", "value": true, "category": "Refactoring"}, "R1732": {"description": "Consider using 'with' for resource-allocating operations Emitted if a resource-allocating assignment or call may be replaced by a 'with' block. By using 'with' the release of the allocated resources is ensured even in the case of an exception.", "name": "consider-using-with", "value": true, "category": "Refactoring"}, "R1733": {"description": "Unnecessary dictionary index lookup, use '%s' instead Emitted when iterating over the dictionary items (key-item pairs) and accessing the value by index lookup. The value can be accessed directly instead.", "name": "unnecessary-dict-index-lookup", "value": true, "category": "Refactoring"}, "R1734": {"description": "Consider using [] instead of list() Emitted when using list() to create an empty list instead of the literal []. The literal is faster as it avoids an additional function call.", "name": "use-list-literal", "value": true, "category": "Refactoring"}, "R1735": {"description": "Consider using '%s' instead of a call to 'dict'. Emitted when using dict() to create a dictionary instead of a literal '{ ... }'. The literal is faster as it avoids an additional function call.", "name": "use-dict-literal", "value": true, "category": "Refactoring"}, "R1736": {"description": "Unnecessary list index lookup, use '%s' instead Emitted when iterating over an enumeration and accessing the value by index lookup. The value can be accessed directly instead.", "name": "unnecessary-list-index-lookup", "value": true, "category": "Refactoring"}, "R0801": {"description": "Similar lines in %s files Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.", "name": "duplicate-code", "value": true, "category": "Similarities"}, "RP0801": {"description": "Duplication.", "name": "", "value": true, "category": "Similarities"}, "C0401": {"description": "Wrong spelling of a word '%s' in a comment: Used when a word in comment is not spelled correctly.", "name": "wrong-spelling-in-comment", "value": true, "category": "Spelling"}, "C0402": {"description": "Wrong spelling of a word '%s' in a docstring: Used when a word in docstring is not spelled correctly.", "name": "wrong-spelling-in-docstring", "value": true, "category": "Spelling"}, "C0403": {"description": "Invalid characters %r in a docstring Used when a word in docstring cannot be checked by enchant.", "name": "invalid-characters-in-docstring", "value": true, "category": "Spelling"}, "E1507": {"description": "%s does not support %s type argument Env manipulation functions support only string type arguments. See https://docs.python.org/3/library/os.html#os.getenv.", "name": "invalid-envvar-value", "value": true, "category": "Stdlib"}, "E1519": {"description": "Singledispatch decorator should not be used with methods, use singledispatchmethod instead. singledispatch should decorate functions and not class/instance methods. Use singledispatchmethod for those cases.", "name": "singledispatch-method", "value": true, "category": "Stdlib"}, "E1520": {"description": "Singledispatchmethod decorator should not be used with functions, use singledispatch instead. singledispatchmethod should decorate class/instance methods and not functions. Use singledispatch for those cases.", "name": "singledispatchmethod-function", "value": true, "category": "Stdlib"}, "W1501": {"description": "\"%s\" is not a valid mode for open. Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See https://docs.python.org/3/library/functions.html#open.", "name": "bad-open-mode", "value": true, "category": "Stdlib"}, "W1502": {"description": "Using datetime.time in a boolean context. Using datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See https://bugs.python.org/issue13936 for reference. This message can't be emitted when using Python >= 3.5.", "name": "boolean-datetime", "value": true, "category": "Stdlib"}, "W1503": {"description": "Redundant use of %s with constant value %r The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.", "name": "redundant-unittest-assert", "value": true, "category": "Stdlib"}, "W1506": {"description": "Threading.Thread needs the target function The warning is emitted when a threading.Thread class is instantiated without the target function being passed as a kwarg or as a second argument. By default, the first parameter is the group param, not the target param.", "name": "bad-thread-instantiation", "value": true, "category": "Stdlib"}, "W1507": {"description": "Using copy.copy(os.environ). Use os.environ.copy() instead. os.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See https://bugs.python.org/issue15373 for reference.", "name": "shallow-copy-environ", "value": true, "category": "Stdlib"}, "W1508": {"description": "%s default type is %s. Expected str or None. Env manipulation functions return None or str values. Supplying anything different as a default may cause bugs. See https://docs.python.org/3/library/os.html#os.getenv.", "name": "invalid-envvar-default", "value": true, "category": "Stdlib"}, "W1509": {"description": "Using preexec_fn keyword which may be unsafe in the presence of threads The preexec_fn parameter is not safe to use in the presence of threads in your application. The child process could deadlock before exec is called. If you must use it, keep it trivial! Minimize the number of libraries you call into. See https://docs.python.org/3/library/subprocess.html#popen-constructor.", "name": "subprocess-popen-preexec-fn", "value": true, "category": "Stdlib"}, "W1510": {"description": "'subprocess.run' used without explicitly defining the value for 'check'. The check keyword is set to False by default. It means the process launched by subprocess.run can exit with a non-zero exit code and fail silently. It's better to set it explicitly to make clear what the error- handling behavior is.", "name": "subprocess-run-check", "value": true, "category": "Stdlib"}, "W1514": {"description": "Using open without explicitly specifying an encoding It is better to specify an encoding when opening documents. Using the system default implicitly can create problems on other operating systems. See https://peps.python.org/pep-0597/.", "name": "unspecified-encoding", "value": true, "category": "Stdlib"}, "W1515": {"description": "Leaving functions creating breakpoints in production code is not recommended Calls to breakpoint(), sys.breakpointhook() and pdb.set_trace() should be removed from code that is not actively being debugged.", "name": "forgotten-debug-statement", "value": true, "category": "Stdlib"}, "W1518": {"description": "'lru_cache(maxsize=None)' or 'cache' will keep all method args alive indefinitely, including 'self' By decorating a method with lru_cache or cache the 'self' argument will be linked to the function and therefore never garbage collected. Unless your instance will never need to be garbage collected (singleton) it is recommended to refactor code to avoid this pattern or add a maxsize to the cache. The default value for maxsize is 128.", "name": "method-cache-max-size-none", "value": true, "category": "Stdlib"}, "W4902": {"description": "Using deprecated method %s() The method is marked as deprecated and will be removed in the future.", "name": "deprecated-method", "value": true, "category": "Stdlib"}, "W4903": {"description": "Using deprecated argument %s of method %s() The argument is marked as deprecated and will be removed in the future.", "name": "deprecated-argument", "value": true, "category": "Stdlib"}, "W4904": {"description": "Using deprecated class %s of module %s The class is marked as deprecated and will be removed in the future.", "name": "deprecated-class", "value": true, "category": "Stdlib"}, "W4905": {"description": "Using deprecated decorator %s() The decorator is marked as deprecated and will be removed in the future.", "name": "deprecated-decorator", "value": true, "category": "Stdlib"}, "E1300": {"description": "Unsupported format character %r (%#02x) at index %d Used when an unsupported format character is used in a format string.", "name": "bad-format-character", "value": true, "category": "String"}, "E1301": {"description": "Format string ends in middle of conversion specifier Used when a format string terminates before the end of a conversion specifier.", "name": "truncated-format-string", "value": true, "category": "String"}, "E1302": {"description": "Mixing named and unnamed conversion specifiers in format string Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.", "name": "mixed-format-string", "value": true, "category": "String"}, "E1303": {"description": "Expected mapping for format string, not %s Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.", "name": "format-needs-mapping", "value": true, "category": "String"}, "E1304": {"description": "Missing key %r in format string dictionary Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.", "name": "missing-format-string-key", "value": true, "category": "String"}, "E1305": {"description": "Too many arguments for format string Used when a format string that uses unnamed conversion specifiers is given too many arguments.", "name": "too-many-format-args", "value": true, "category": "String"}, "E1306": {"description": "Not enough arguments for format string Used when a format string that uses unnamed conversion specifiers is given too few arguments.", "name": "too-few-format-args", "value": true, "category": "String"}, "E1307": {"description": "Argument %r does not match format type %r Used when a type required by format string is not suitable for actual argument type.", "name": "bad-string-format-type", "value": true, "category": "String"}, "E1310": {"description": "Suspicious argument in %s.%s call The argument to a str.{l,r,}strip call contains a duplicate character,.", "name": "bad-str-strip-call", "value": true, "category": "String"}, "W1300": {"description": "Format string dictionary key should be a string, not %s Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.", "name": "bad-format-string-key", "value": true, "category": "String"}, "W1301": {"description": "Unused key %r in format string dictionary Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.", "name": "unused-format-string-key", "value": true, "category": "String"}, "W1302": {"description": "Invalid format string Used when a PEP 3101 format string is invalid.", "name": "bad-format-string", "value": true, "category": "String"}, "W1303": {"description": "Missing keyword argument %r for format string Used when a PEP 3101 format string that uses named fields doesn't receive one or more required keywords.", "name": "missing-format-argument-key", "value": true, "category": "String"}, "W1304": {"description": "Unused format argument %r Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string.", "name": "unused-format-string-argument", "value": true, "category": "String"}, "W1305": {"description": "Format string contains both automatic field numbering and manual field specification Used when a PEP 3101 format string contains both automatic field numbering (e.g. '{}') and manual field specification (e.g. '{0}').", "name": "format-combined-specification", "value": true, "category": "String"}, "W1306": {"description": "Missing format attribute %r in format specifier %r Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn't have that attribute.", "name": "missing-format-attribute", "value": true, "category": "String"}, "W1307": {"description": "Using invalid lookup key %r in format specifier %r Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn't contain or doesn't have that key as an attribute.", "name": "invalid-format-index", "value": true, "category": "String"}, "W1308": {"description": "Duplicate string formatting argument %r, consider passing as named argument Used when we detect that a string formatting is repeating an argument instead of using named string arguments.", "name": "duplicate-string-formatting-argument", "value": true, "category": "String"}, "W1309": {"description": "Using an f-string that does not have any interpolated variables Used when we detect an f-string that does not use any interpolation variables, in which case it can be either a normal string or a bug in the code.", "name": "f-string-without-interpolation", "value": true, "category": "String"}, "W1310": {"description": "Using formatting for a string that does not have any interpolated variables Used when we detect a string that does not have any interpolation variables, in which case it can be either a normal string without formatting or a bug in the code.", "name": "format-string-without-interpolation", "value": true, "category": "String"}, "W1401": {"description": "Anomalous backslash in string: '%s'. String constant might be missing an r prefix. Used when a backslash is in a literal string but not as an escape.", "name": "anomalous-backslash-in-string", "value": true, "category": "String"}, "W1402": {"description": "Anomalous Unicode escape in byte string: '%s'. String constant might be missing an r or u prefix. Used when an escape like u is encountered in a byte string where it has no effect.", "name": "anomalous-unicode-escape-in-string", "value": true, "category": "String"}, "W1404": {"description": "Implicit string concatenation found in %s String literals are implicitly concatenated in a literal iterable definition : maybe a comma is missing ?.", "name": "implicit-str-concat", "value": true, "category": "String"}, "W1405": {"description": "Quote delimiter %s is inconsistent with the rest of the file Quote delimiters are not used consistently throughout a module (with allowances made for avoiding unnecessary escaping).", "name": "inconsistent-quotes", "value": true, "category": "String"}, "W1406": {"description": "The u prefix for strings is no longer necessary in Python >=3.0 Used when we detect a string with a u prefix. These prefixes were necessary in Python 2 to indicate a string was Unicode, but since Python 3.0 strings are Unicode by default.", "name": "redundant-u-string-prefix", "value": true, "category": "String"}, "W2101": {"description": "'%s()' directly created in 'with' has no effect Used when a new lock instance is created by using with statement which has no effect. Instead, an existing instance should be used to acquire lock.", "name": "useless-with-lock", "value": true, "category": "Threading"}, "E1101": {"description": "%s %r has no %r member%s Used when a variable is accessed for a nonexistent member.", "name": "no-member", "value": true, "category": "Typecheck"}, "E1102": {"description": "%s is not callable Used when an object being called has been inferred to a non callable object.", "name": "not-callable", "value": true, "category": "Typecheck"}, "E1111": {"description": "Assigning result of a function call, where the function has no return Used when an assignment is done on a function call but the inferred function doesn't return anything.", "name": "assignment-from-no-return", "value": true, "category": "Typecheck"}, "E1120": {"description": "No value for argument %s in %s call Used when a function call passes too few arguments.", "name": "no-value-for-parameter", "value": true, "category": "Typecheck"}, "E1121": {"description": "Too many positional arguments for %s call Used when a function call passes too many positional arguments.", "name": "too-many-function-args", "value": true, "category": "Typecheck"}, "E1123": {"description": "Unexpected keyword argument %r in %s call Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.", "name": "unexpected-keyword-arg", "value": true, "category": "Typecheck"}, "E1124": {"description": "Argument %r passed by position and keyword in %s call Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.", "name": "redundant-keyword-arg", "value": true, "category": "Typecheck"}, "E1125": {"description": "Missing mandatory keyword argument %r in %s call Used when a function call does not pass a mandatory keyword-only argument.", "name": "missing-kwoa", "value": true, "category": "Typecheck"}, "E1126": {"description": "Sequence index is not an int, slice, or instance with __index__ Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.", "name": "invalid-sequence-index", "value": true, "category": "Typecheck"}, "E1127": {"description": "Slice index is not an int, None, or instance with __index__ Used when a slice index is not an integer, None, or an object with an __index__ method.", "name": "invalid-slice-index", "value": true, "category": "Typecheck"}, "E1128": {"description": "Assigning result of a function call, where the function returns None Used when an assignment is done on a function call but the inferred function returns nothing but None.", "name": "assignment-from-none", "value": true, "category": "Typecheck"}, "E1129": {"description": "Context manager '%s' doesn't implement __enter__ and __exit__. Used when an instance in a with statement doesn't implement the context manager protocol(__enter__/__exit__).", "name": "not-context-manager", "value": true, "category": "Typecheck"}, "E1130": {"description": "Emitted when a unary operand is used on an object which does not support this type of operation.", "name": "invalid-unary-operand-type", "value": true, "category": "Typecheck"}, "E1131": {"description": "Emitted when a binary arithmetic operation between two operands is not supported.", "name": "unsupported-binary-operation", "value": true, "category": "Typecheck"}, "E1132": {"description": "Got multiple values for keyword argument %r in function call Emitted when a function call got multiple values for a keyword.", "name": "repeated-keyword", "value": true, "category": "Typecheck"}, "E1133": {"description": "Non-iterable value %s is used in an iterating context Used when a non-iterable value is used in place where iterable is expected.", "name": "not-an-iterable", "value": true, "category": "Typecheck"}, "E1134": {"description": "Non-mapping value %s is used in a mapping context Used when a non-mapping value is used in place where mapping is expected.", "name": "not-a-mapping", "value": true, "category": "Typecheck"}, "E1135": {"description": "Value '%s' doesn't support membership test Emitted when an instance in membership test expression doesn't implement membership protocol (__contains__/__iter__/__getitem__).", "name": "unsupported-membership-test", "value": true, "category": "Typecheck"}, "E1136": {"description": "Value '%s' is unsubscriptable Emitted when a subscripted value doesn't support subscription (i.e. doesn't define __getitem__ method or __class_getitem__ for a class).", "name": "unsubscriptable-object", "value": true, "category": "Typecheck"}, "E1137": {"description": "%r does not support item assignment Emitted when an object does not support item assignment (i.e. doesn't define __setitem__ method).", "name": "unsupported-assignment-operation", "value": true, "category": "Typecheck"}, "E1138": {"description": "%r does not support item deletion Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method).", "name": "unsupported-delete-operation", "value": true, "category": "Typecheck"}, "E1139": {"description": "Invalid metaclass %r used Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.", "name": "invalid-metaclass", "value": true, "category": "Typecheck"}, "E1141": {"description": "Unpacking a dictionary in iteration without calling .items() Emitted when trying to iterate through a dict without calling .items().", "name": "dict-iter-missing-items", "value": true, "category": "Typecheck"}, "E1142": {"description": "'await' should be used within an async function Emitted when await is used outside an async function.", "name": "await-outside-async", "value": true, "category": "Typecheck"}, "E1143": {"description": "'%s' is unhashable and can't be used as a %s in a %s Emitted when a dict key or set member is not hashable (i.e. doesn't define __hash__ method).", "name": "unhashable-member", "value": true, "category": "Typecheck"}, "E1144": {"description": "Slice step cannot be 0 Used when a slice step is 0 and the object doesn't implement a custom __getitem__ method.", "name": "invalid-slice-step", "value": true, "category": "Typecheck"}, "I1101": {"description": "%s %r has no %r member%s, but source is unavailable. Consider adding this module to extension-pkg-allow-list if you want to perform analysis based on run-time introspection of living objects. Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.", "name": "c-extension-no-member", "value": true, "category": "Typecheck"}, "W1113": {"description": "Keyword argument before variable positional arguments list in the definition of %s function When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.", "name": "keyword-arg-before-vararg", "value": true, "category": "Typecheck"}, "W1114": {"description": "Positional arguments appear to be out of order Emitted when the caller's argument names fully match the parameter names in the function signature but do not have the same order.", "name": "arguments-out-of-order", "value": true, "category": "Typecheck"}, "W1115": {"description": "Non-string value assigned to __name__ Emitted when a non-string value is assigned to __name__.", "name": "non-str-assignment-to-dunder-name", "value": true, "category": "Typecheck"}, "W1116": {"description": "Second argument of isinstance is not a type Emitted when the second argument of an isinstance call is not a type.", "name": "isinstance-second-argument-not-valid-type", "value": true, "category": "Typecheck"}, "W1117": {"description": "%r will be included in %r since a positional-only parameter with this name already exists Emitted when a function is called with a keyword argument that has the same name as a positional-only parameter and the function contains a keyword variadic parameter dict.", "name": "kwarg-superseded-by-positional-arg", "value": true, "category": "Typecheck"}, "C2503": {"description": "PEP8 recommends UTF-8 as encoding for Python files PEP8 recommends UTF-8 default encoding for Python files. See https://peps.python.org/pep-0008/#source-file-encoding.", "name": "bad-file-encoding", "value": true, "category": "Unicode Checker"}, "E2501": {"description": "UTF-16 and UTF-32 aren't backward compatible. Use UTF-8 instead For compatibility use UTF-8 instead of UTF-16/UTF-32. See also https://bugs.python.org/issue1503789 for a history of this issue. And https://softwareengineering.stackexchange.com/questions/102205/ for some possible problems when using UTF-16 for instance.", "name": "invalid-unicode-codec", "value": true, "category": "Unicode Checker"}, "E2502": {"description": "Contains control characters that can permit obfuscated code executed differently than displayed bidirectional unicode are typically not displayed characters required to display right-to-left (RTL) script (i.e. Chinese, Japanese, Arabic, Hebrew, ...) correctly. So can you trust this code? Are you sure it displayed correctly in all editors? If you did not write it or your language is not RTL, remove the special characters, as they could be used to trick you into executing code, that does something else than what it looks like. More Information: https://en.wikipedia.org/wiki/Bidirectional_text https://trojansource.codes/.", "name": "bidirectional-unicode", "value": true, "category": "Unicode Checker"}, "E2510": {"description": "Invalid unescaped character backspace, use \"b\" instead. Moves the cursor back, so the character after it will overwrite the character before.", "name": "invalid-character-backspace", "value": true, "category": "Unicode Checker"}, "E2511": {"description": "Invalid unescaped character carriage-return, use \"r\" instead. Moves the cursor to the start of line, subsequent characters overwrite the start of the line.", "name": "invalid-character-carriage-return", "value": true, "category": "Unicode Checker"}, "E2512": {"description": "Invalid unescaped character sub, use \"x1A\" instead. Ctrl+Z \"End of text\" on Windows. Some programs (such as type) ignore the rest of the file after it.", "name": "invalid-character-sub", "value": true, "category": "Unicode Checker"}, "E2513": {"description": "Invalid unescaped character esc, use \"x1B\" instead. Commonly initiates escape codes which allow arbitrary control of the terminal.", "name": "invalid-character-esc", "value": true, "category": "Unicode Checker"}, "E2514": {"description": "Invalid unescaped character nul, use \"0\" instead. Mostly end of input for python.", "name": "invalid-character-nul", "value": true, "category": "Unicode Checker"}, "E2515": {"description": "Invalid unescaped character zero-width-space, use \"u200B\" instead. Invisible space character could hide real code execution.", "name": "invalid-character-zero-width-space", "value": true, "category": "Unicode Checker"}, "W2301": {"description": "Unnecessary ellipsis constant Used when the ellipsis constant is encountered and can be avoided. A line of code consisting of an ellipsis is unnecessary if there is a docstring on the preceding line or if there is a statement in the same scope.", "name": "unnecessary-ellipsis", "value": true, "category": "Unnecessary Ellipsis"}, "C2801": {"description": "Unnecessarily calls dunder method %s. %s. Used when a dunder method is manually called instead of using the corresponding function/method/operator.", "name": "unnecessary-dunder-call", "value": true, "category": "Unnecessary-Dunder-Call"}, "W2601": {"description": "F-strings are not supported by all versions included in the py-version setting Used when the py-version set by the user is lower than 3.6 and pylint encounters an f-string.", "name": "using-f-string-in-unsupported-version", "value": true, "category": "Unsupported Version"}, "W2602": {"description": "Typing.final is not supported by all versions included in the py-version setting Used when the py-version set by the user is lower than 3.8 and pylint encounters a typing.final decorator.", "name": "using-final-decorator-in-unsupported-version", "value": true, "category": "Unsupported Version"}, "E0601": {"description": "Using variable %r before assignment Emitted when a local variable is accessed before its assignment took place. Assignments in try blocks are assumed not to have occurred when evaluating associated except/finally blocks. Assignments in except blocks are assumed not to have occurred when evaluating statements outside the block, except when the associated try block contains a return statement.", "name": "used-before-assignment", "value": true, "category": "Variables"}, "E0602": {"description": "Undefined variable %r Used when an undefined variable is accessed.", "name": "undefined-variable", "value": true, "category": "Variables"}, "E0603": {"description": "Undefined variable name %r in __all__ Used when an undefined variable name is referenced in __all__.", "name": "undefined-all-variable", "value": true, "category": "Variables"}, "E0604": {"description": "Invalid object %r in __all__, must contain only strings Used when an invalid (non-string) object occurs in __all__.", "name": "invalid-all-object", "value": true, "category": "Variables"}, "E0605": {"description": "Invalid format for __all__, must be tuple or list Used when __all__ has an invalid format.", "name": "invalid-all-format", "value": true, "category": "Variables"}, "E0611": {"description": "No name %r in module %r Used when a name cannot be found in a module.", "name": "no-name-in-module", "value": true, "category": "Variables"}, "E0633": {"description": "Attempting to unpack a non-sequence%s Used when something which is not a sequence is used in an unpack assignment.", "name": "unpacking-non-sequence", "value": true, "category": "Variables"}, "E0643": {"description": "Invalid index for iterable length Emitted when an index used on an iterable goes beyond the length of that iterable.", "name": "potential-index-error", "value": true, "category": "Variables"}, "W0601": {"description": "Global variable %r undefined at the module level Used when a variable is defined through the \"global\" statement but the variable is not defined in the module scope.", "name": "global-variable-undefined", "value": true, "category": "Variables"}, "W0602": {"description": "Using global for %r but no assignment is done When a variable defined in the global scope is modified in an inner scope, the 'global' keyword is required in the inner scope only if there is an assignment operation done in the inner scope.", "name": "global-variable-not-assigned", "value": true, "category": "Variables"}, "W0603": {"description": "Using the global statement Used when you use the \"global\" statement to update a global variable. Pylint discourages its usage. That doesn't mean you cannot use it!.", "name": "global-statement", "value": true, "category": "Variables"}, "W0604": {"description": "Using the global statement at the module level Used when you use the \"global\" statement at the module level since it has no effect.", "name": "global-at-module-level", "value": true, "category": "Variables"}, "W0611": {"description": "Unused %s Used when an imported module or variable is not used.", "name": "unused-import", "value": true, "category": "Variables"}, "W0612": {"description": "Unused variable %r Used when a variable is defined but not used.", "name": "unused-variable", "value": true, "category": "Variables"}, "W0613": {"description": "Unused argument %r Used when a function or method argument is not used.", "name": "unused-argument", "value": true, "category": "Variables"}, "W0614": {"description": "Unused import(s) %s from wildcard import of %s Used when an imported module or variable is not used from a 'from X import *' style import.", "name": "unused-wildcard-import", "value": true, "category": "Variables"}, "W0621": {"description": "Redefining name %r from outer scope (line %s) Used when a variable's name hides a name defined in an outer scope or except handler.", "name": "redefined-outer-name", "value": true, "category": "Variables"}, "W0622": {"description": "Redefining built-in %r Used when a variable or function override a built-in.", "name": "redefined-builtin", "value": true, "category": "Variables"}, "W0631": {"description": "Using possibly undefined loop variable %r Used when a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.", "name": "undefined-loop-variable", "value": true, "category": "Variables"}, "W0632": {"description": "Possible unbalanced tuple unpacking with sequence %s: left side has %d label%s, right side has %d value%s Used when there is an unbalanced tuple unpacking in assignment.", "name": "unbalanced-tuple-unpacking", "value": true, "category": "Variables"}, "W0640": {"description": "Cell variable %s defined in loop A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.", "name": "cell-var-from-loop", "value": true, "category": "Variables"}, "W0641": {"description": "Possibly unused variable %r Used when a variable is defined but might not be used. The possibility comes from the fact that locals() might be used, which could consume or not the said variable.", "name": "possibly-unused-variable", "value": true, "category": "Variables"}, "W0642": {"description": "Invalid assignment to %s in method Invalid assignment to self or cls in instance or class method respectively.", "name": "self-cls-assignment", "value": true, "category": "Variables"}, "W0644": {"description": "Possible unbalanced dict unpacking with %s: left side has %d label%s, right side has %d value%s Used when there is an unbalanced dict unpacking in assignment or for loop.", "name": "unbalanced-dict-unpacking", "value": true, "category": "Variables"}}